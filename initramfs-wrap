#!/usr/bin/env python3
import argparse
from glob import glob
import gzip
import logging
import os
import platform
import shutil
import subprocess
import tempfile

DEB2GNU = {
    'amd64': 'x86_64',
    'arm64': 'aarch64',
}
DEB2QEMU = {
    'amd64': 'x86_64',
    'arm64': 'aarch64',
}


def get_binfmt_misc_interpreter(arch):
    if platform.machine() == DEB2GNU.get(arch, arch):
        return None
    qemu_arch = DEB2QEMU.get(arch, arch)
    with open(f'/proc/sys/fs/binfmt_misc/qemu-{qemu_arch}') as fp:
        for line in fp:
            if line.startswith('interpreter '):
                return line[12:-1]
    raise Exception('/proc/sys/fs/binfmt_misc is not configured')


def extract_deb(chroot, deb):
    archives = os.path.join(
        chroot, 'var', 'cache', 'apt', 'archives')
    deb_path, = glob(os.path.join(archives, f'{deb}_*.deb'))
    subprocess.check_call(['dpkg', '-x', deb_path, chroot])


def run_in_chroot(chroot, cmd):
    env_path = os.environ['PATH']
    fakechroot = f'{chroot}/bin/fakechroot'
    libfakechroot, = glob(f'{chroot}/usr/lib/*/fakechroot/libfakechroot.so')
    args = [
        'env',
        f'QEMU_LD_PREFIX={chroot}',
        f'PATH={chroot}/sbin:{chroot}/bin:{env_path}',
        'sh',
        fakechroot,
        '-l', libfakechroot,
        'chroot',
        chroot,
        'fakeroot-sysv',
        '-i', '/fakeroot-state',
        '-s', '/fakeroot-state',
    ]
    args.extend(cmd)
    subprocess.check_call(args)


def get_chroot_archive(arch, suite):
    return os.path.expanduser(f'~/.cache/initramfs-wrap/{arch}-{suite}.tar.gz')


def host_fakeroot_command(args):
    result = [
        'fakeroot',
        '-i', os.path.join(chroot, 'fakeroot-state'),
        '-s', os.path.join(chroot, 'fakeroot-state'),
    ]
    result.extend(args)
    return result


def debootstrap1(chroot, arch, suite, **kwargs):
    cache = os.path.expanduser('~/.cache/initramfs-wrap/debootstrap')
    os.makedirs(cache, exist_ok=True)
    include_packages = ','.join((
        'fakechroot',
        'fakeroot',
        'gdb',
        'iproute2',
        'procps',
        'strace',
        'tmux',
        'valgrind',
        'vim-tiny',
    ))
    exclude_packages = ','.join((
        'binutils',
        'binutils-common',
        f'binutils-{DEB2GNU.get(arch, arch)}-linux-gnu',
        'libbinutils',
        'tzdata',
    ))
    subprocess.check_call([
        'fakechroot',
        'fakeroot',
        '-s', os.path.join(chroot, 'fakeroot-state'),
        'debootstrap',
        f'--cache-dir={cache}',
        '--foreign',
        f'--arch={arch}',
        '--variant=fakechroot',
        f'--include={include_packages}',
        f'--exclude={exclude_packages}',
        suite,
        chroot,
    ])


def copy_qemu_user_static(chroot, arch, **kwargs):
    qemu_path = get_binfmt_misc_interpreter(arch)
    if qemu_path is not None:
        shutil.copy(qemu_path, chroot + qemu_path)


def extract_bootstrapping_tools(chroot, **kwargs):
    for package in ('libfakeroot', 'fakeroot', 'libfakechroot', 'fakechroot'):
        extract_deb(chroot, package)


def fixup_fakechroot(chroot, **kwargs):
    path = os.path.join(chroot, 'bin', 'fakechroot')
    with open(path, 'r+') as fp:
        content = fp.read()
        fp.truncate(0)
        fp.write(content.replace(
            'FAKECHROOT_DETECT=1 /bin/echo',
            'FAKECHROOT_DETECT=1 sh -c :'))


EXCLUDE_PATHS = (
    '/usr/share/doc',
    '/usr/share/locale',
    '/usr/share/man',
)


def configure_dpkg_exclude(chroot, **kwargs):
    config_path = os.path.join(chroot, 'etc', 'dpkg', 'dpkg.cfg.d', 'exclude')
    with open(config_path, 'w') as fp:
        for exclude_path in EXCLUDE_PATHS:
            fp.write(f'path-exclude={exclude_path}/*\n')
        fp.write(f'path-exclude=*.a\n')


def prune_dpkg_exclude(chroot, **kwargs):
    for exclude_path in EXCLUDE_PATHS:
        run_in_chroot(chroot, ['find', exclude_path, '-type', 'f', '-delete'])


def debootstrap2(chroot, **kwargs):
    run_in_chroot(chroot, ['/debootstrap/debootstrap', '--second-stage'])


def fixup_fakechroot_again(chroot, **kwargs):
    fixup_fakechroot(chroot, **kwargs)


APT_CACHE_PATHS = (
    '/var/cache/apt/archives',
    '/var/lib/apt/lists',
)


def prune_apt_cache(chroot, **kwargs):
    for apt_cache_path in APT_CACHE_PATHS:
        run_in_chroot(chroot, ['rm', '-r', apt_cache_path])


def fixup_symlinks(chroot, **kwargs):
    ln = f'ln -fsT "$(readlink "$0" | cut -c{len(chroot) + 1}-)" $0'
    subprocess.check_call(host_fakeroot_command([
        'find',
        '.',
        '-lname', os.path.join(chroot, '*'),
        '-exec', 'sh', '-c', ln, '{}', ';',
    ]), cwd=chroot)


def archive_chroot(chroot, arch, suite, **kwargs):
    subprocess.check_call(host_fakeroot_command([
        'tar',
        '-C', chroot,
        '-czf', get_chroot_archive(arch, suite),
        '.',
    ]))


CHROOT_SEQUENCE = (
    debootstrap1,
    copy_qemu_user_static,
    extract_bootstrapping_tools,
    fixup_fakechroot,
    configure_dpkg_exclude,
    prune_dpkg_exclude,
    debootstrap2,
    fixup_fakechroot_again,
    prune_apt_cache,
    fixup_symlinks,
    archive_chroot,
)


def extract_chroot(chroot, arch, suite, **kwargs):
    subprocess.check_call([
        'fakeroot',
        '-s', os.path.join(chroot, 'fakeroot-state'),
        'tar',
        '-C', chroot,
        '-xzf', get_chroot_archive(arch, suite),
    ])


def extract_input_initramfs_fp(chroot, fp):
    orig = os.path.join(chroot, 'orig')
    os.makedirs(orig, exist_ok=True)
    args = host_fakeroot_command(['cpio', '-idv'])
    p = subprocess.Popen(args, stdin=subprocess.PIPE, cwd=orig)
    shutil.copyfileobj(fp, p.stdin)
    p.stdin.flush()
    retcode = p.wait()
    if retcode != 0:
        raise subprocess.CalledProcessError(retcode, args)


def extract_input_initramfs(chroot, input_initramfs, **kwargs):
    with open(input_initramfs, 'rb') as fp:
        magic = fp.read(6)
        fp.seek(0)
        if magic[:2] == b'\037\213':
            with gzip.open(fp) as gzfp:
                extract_input_initramfs_fp(chroot, gzfp)
        elif magic == b'070701':
            extract_input_initramfs_fp(chroot, fp)
        else:
            raise Exception(f'{input_initramfs} is neither .gz nor .cpio file')


def configure_init(chroot, **kwargs):
    subprocess.check_call(host_fakeroot_command([
        'ln', '-s', '/usr/lib/systemd/systemd', 'init',
    ]), cwd=chroot)


def configure_root(chroot, **kwargs):
    shadow = os.path.join(chroot, 'etc', 'shadow')
    subprocess.check_call(host_fakeroot_command([
        'sed', '-i', r's/root:\*:/root::/', shadow,
    ]))


def fixup_proc_dev(chroot, **kwargs):
    subprocess.check_call(host_fakeroot_command([
        'rm', 'proc', 'dev',
    ]), cwd=chroot)
    subprocess.check_call(host_fakeroot_command([
        'mkdir', 'proc', 'dev',
    ]), cwd=chroot)


def configure_hostname(chroot, **kwargs):
    with open(os.path.join(chroot, 'etc', 'hostname'), 'w') as fp:
        fp.write('initramfs-wrap\n')


def add_extra_files(chroot, extra_files, **kwargs):
    if extra_files is not None:
        for spec in extra_files:
            src, dst = spec.split(':')
            real_dst = f'{chroot}{dst}'
            shutil.copyfile(src, real_dst)


def archive_output_initramfs(chroot, arch, output_initramfs, **kwargs):
    if output_initramfs.endswith('.gz'):
        fp = gzip.open(output_initramfs, 'wb', 1)
    else:
        fp = open(output_initramfs, 'wb')
    with fp:
        exclude_paths = [
            './fakeroot-state',
        ]
        qemu_path = get_binfmt_misc_interpreter(arch)
        if qemu_path is not None:
            exclude_paths.append(f'.{qemu_path}')
        exclude_expr = ' '.join(
            f'! -path {exclude_path}'
            for exclude_path in exclude_paths)
        args = host_fakeroot_command([
            'sh',
            '-c', f'find . {exclude_expr} | cpio -o -H newc',
        ])
        p = subprocess.Popen(
            args, stdout=subprocess.PIPE, cwd=chroot)
        shutil.copyfileobj(p.stdout, fp)
        retcode = p.wait()
        if retcode != 0:
            raise subprocess.CalledProcessError(retcode, args)


INITRAMFS_SEQUENCE = (
    extract_chroot,
    extract_input_initramfs,
    configure_init,
    configure_root,
    fixup_proc_dev,
    configure_hostname,
    add_extra_files,
    archive_output_initramfs,
)


def is_in_sequence(args_s, sequence):
    return args_s in (step.__name__ for step in sequence)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Add debugging tools to initramfs')
    parser.add_argument('-a', required=True, help='Architecture')
    parser.add_argument('-c', help='Reuse an existing chroot')
    parser.add_argument(
        '-d', action='append', help='Extra files to package (SRC:DST)')
    parser.add_argument('-f', action='store_true', help='Ignore cached chroot')
    parser.add_argument('-i', required=True, help='Input initramfs')
    parser.add_argument(
        '-k', action='store_true', help='Keep intermediate chroot')
    parser.add_argument('-o', required=True, help='Output initramfs')
    parser.add_argument('-s', help='Step to execute')
    parser.add_argument('-u', help='Suite', default='testing')
    parser.add_argument('-v', action='store_true', help='Verbose output')
    args = parser.parse_args()
    if args.v:
        logging.basicConfig(level=logging.DEBUG)
    if args.c is None:
        chroot = tempfile.mkdtemp(prefix=f'debootstrap-{args.a}-')
        logging.info('[*] Created %s', chroot)
    else:
        chroot = args.c
        logging.info('[*] Reusing %s', chroot)
    try:
        if (args.f or
                is_in_sequence(args.s, CHROOT_SEQUENCE) or
                not os.path.exists(get_chroot_archive(args.a, args.u))):
            for chroot_step in CHROOT_SEQUENCE:
                if args.s is None or args.s == chroot_step.__name__:
                    logging.info('[*] %s', chroot_step.__name__)
                    chroot_step(
                        chroot=chroot,
                        arch=args.a,
                        suite=args.u,
                    )
        for initramfs_step in INITRAMFS_SEQUENCE:
            if args.s is None or args.s == initramfs_step.__name__:
                logging.info('[*] %s', initramfs_step.__name__)
                initramfs_step(
                    chroot=chroot,
                    arch=args.a,
                    suite=args.u,
                    input_initramfs=args.i,
                    output_initramfs=args.o,
                    extra_files=args.d,
                )
    finally:
        if args.c is None and not args.k:
            logging.info('[*] Deleting %s', chroot)
            shutil.rmtree(chroot)
        else:
            logging.info('[*] Keeping %s', chroot)
