#!/usr/bin/env python3
import argparse
from glob import glob
import logging
import os
import shutil
import subprocess

DEB2QEMU = {
    'arm64': 'aarch64',
}


def get_qemu_arch(arch):
    return DEB2QEMU.get(arch, arch)


def get_chroot(arch):
    return os.path.join(os.getcwd(), f'debootstrap-{arch}')


def get_chroot_state(arch):
    return os.path.join(get_chroot(arch), 'fakeroot-state')


def get_binfmt_misc_interpreter(arch):
    with open(f'/proc/sys/fs/binfmt_misc/qemu-{get_qemu_arch(arch)}') as fp:
        for line in fp:
            if line.startswith('interpreter '):
                return line[12:-1]
    raise Exception('/proc/sys/fs/binfmt_misc is not configured')


def extract_deb(arch, deb):
    archives = os.path.join(
        get_chroot(arch), 'var', 'cache', 'apt', 'archives')
    deb_path, = glob(os.path.join(archives, f'{deb}_*.deb'))
    subprocess.check_call(['dpkg', '-x', deb_path, get_chroot(arch)])


def run_in_chroot(arch, cmd):
    chroot = get_chroot(arch)
    env_path = os.environ['PATH']
    fakechroot = f'{chroot}/bin/fakechroot'
    libfakechroot, = glob(f'{chroot}/usr/lib/*/fakechroot/libfakechroot.so')
    args = [
        'env',
        f'QEMU_LD_PREFIX={chroot}',
        f'PATH={chroot}/sbin:{chroot}/bin:{env_path}',
        'sh',
        fakechroot,
        '-l', libfakechroot,
        'chroot',
        chroot,
        'fakeroot-sysv',
        '-i', '/fakeroot-state',
        '-s', '/fakeroot-state',
    ]
    args.extend(cmd)
    subprocess.check_call(args)


def debootstrap1(arch):
    cache = os.path.expanduser('~/.cache/initramfs-wrap/debootstrap')
    os.makedirs(cache, exist_ok=True)
    packages = ','.join((
        'fakechroot',
        'fakeroot',
        'gdb',
        'iproute2',
        'procps',
        'screen',
        'strace',
        'valgrind',
        'vim',
    ))
    subprocess.check_call([
        'fakechroot',
        'fakeroot',
        '-s', get_chroot_state(arch),
        'debootstrap',
        f'--cache-dir={cache}',
        '--foreign',
        f'--arch={arch}',
        '--variant=fakechroot',
        f'--include={packages}',
        'testing',
        get_chroot(arch),
    ])


def copy_qemu_user_static(arch):
    qemu_path = get_binfmt_misc_interpreter(arch)
    shutil.copy(qemu_path, f'debootstrap-{arch}' + qemu_path)


def extract_bootstrapping_tools(arch):
    for package in ('libfakeroot', 'fakeroot', 'libfakechroot', 'fakechroot'):
        extract_deb(arch, package)


def fixup_fakechroot(arch):
    path = os.path.join(get_chroot(arch), 'bin', 'fakechroot')
    with open(path, 'r+') as fp:
        content = fp.read()
        fp.truncate(0)
        fp.write(content.replace(
            'FAKECHROOT_DETECT=1 /bin/echo',
            'FAKECHROOT_DETECT=1 sh -c :'))


EXCLUDE_PATHS = (
    '/usr/share/doc',
    '/usr/share/locale',
    '/usr/share/man',
)


def configure_dpkg_exclude(arch):
    config_path = os.path.join(
        get_chroot(arch), 'etc', 'dpkg', 'dpkg.cfg.d', 'exclude')
    with open(config_path, 'w') as fp:
        for exclude_path in EXCLUDE_PATHS:
            fp.write(f'path-exclude={exclude_path}/*\n')


def prune_dpkg_exclude(arch):
    for exclude_path in EXCLUDE_PATHS:
        run_in_chroot(arch, ['find', exclude_path, '-type', 'f', '-delete'])


def debootstrap2(arch):
    run_in_chroot(arch, ['/debootstrap/debootstrap', '--second-stage'])


def fixup_fakechroot_again(arch):
    fixup_fakechroot(arch)


APT_CACHE_PATHS = (
    '/var/cache/apt/archives',
    '/var/lib/apt/lists',
)


def prune_apt_cache(arch):
    for apt_cache_path in APT_CACHE_PATHS:
        run_in_chroot(arch, ['rm', '-r', apt_cache_path])


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-a', required=True)
    parser.add_argument('-i', required=True)
    parser.add_argument('-o', required=True)
    parser.add_argument('-s')
    parser.add_argument('-v', action='store_true')
    args = parser.parse_args()
    if args.v:
        logging.basicConfig(level=logging.DEBUG)
    sequence = [
        debootstrap1,
        copy_qemu_user_static,
        extract_bootstrapping_tools,
        fixup_fakechroot,
        configure_dpkg_exclude,
        prune_dpkg_exclude,
        debootstrap2,
        fixup_fakechroot_again,
        prune_apt_cache,
    ]
    for step in sequence:
        if args.s is None or args.s == step.__name__:
            logging.info('[*] %s', step.__name__)
            step(args.a)
